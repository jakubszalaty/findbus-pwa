type Geometry {
    type: String
    coordinates: [[Float]]
}

type Feature {
    type: String
    geometry: Geometry
}

type RouteCords {
    type: String
    features: [Feature]
}

"Contains all information about specific vehicle"
type Vehicle {
    gmvid: Int
    id: Int
    line: String
    squad: String
    lineType: String
    vehicleId: String
    route: String
    routeCords: RouteCords
    from: String
    to: String
    lat: String
    lnt: String
    speed: String
    timeString: String
    timeNumber: Int
    icon: String
}

"Input for search verhicles"
input VehiclesWhereInput {
    gmvid: Int
    id: Int
    line: String
    squad: String
    lineType: String
    vehicleId: String
    route: String
    from: String
    to: String
    lat: String
    lnt: String
    speed: String
    timeString: String
    timeNumber: Int
    icon: String
}

input VehicleWhereInput {
    id: Int!
}

type Departure {
    line: String
    direction: String
    arrival: String
    onStop: Boolean
    isApprox: Boolean
}
type Stop {
    id: Int
    lat: String
    lnt: String
    name: String
    groupId: Int
    columnId: Int
}


"Input for search stops"
input StopsWhereInput {
    id: Int
    name: String
    groupId: Int
    columnId: Int
}

input StopWhereInput {
    id: Int!
}

type StopWithDepartures {
    id: Int
    lat: String
    lnt: String
    name: String
    groupId: Int
    columnId: Int
    departures: [Departure]
}

input StopsWithDeparturesWhereInput {
    id: Int
    name: String
    groupId: Int
}

type Query {
    "Return active vehicles"
    vehicles(where: VehiclesWhereInput): [Vehicle]
    vehicle(where: VehicleWhereInput!): Vehicle
    stops(where: StopsWhereInput): [Stop]
    stopsWithDepartures(where: StopsWithDeparturesWhereInput!): [StopWithDepartures]
    stop(where: StopWhereInput!): Stop
}
